

Main file = eulerian_path.als
Sig this/Node, Field adj: {this/Node->this/Node}
Sig this/Node, Field visited: {this/Node->this/Node}
pred this/run$1, RETURN: {PrimitiveBoolean}
pred this/assumptions, RETURN: {PrimitiveBoolean}
pred this/move, RETURN: {PrimitiveBoolean}
pred this/stutter, RETURN: {PrimitiveBoolean}
pred this/run$2, RETURN: {PrimitiveBoolean}
pred this/fairness, RETURN: {PrimitiveBoolean}
fun integer/add, Param n1: {Int}
fun integer/add, Param n2: {Int}
fun integer/add, RETURN: {Int}
fun integer/plus, Param n1: {Int}
fun integer/plus, Param n2: {Int}
fun integer/plus, RETURN: {Int}
fun integer/sub, Param n1: {Int}
fun integer/sub, Param n2: {Int}
fun integer/sub, RETURN: {Int}
fun integer/minus, Param n1: {Int}
fun integer/minus, Param n2: {Int}
fun integer/minus, RETURN: {Int}
fun integer/mul, Param n1: {Int}
fun integer/mul, Param n2: {Int}
fun integer/mul, RETURN: {Int}
fun integer/div, Param n1: {Int}
fun integer/div, Param n2: {Int}
fun integer/div, RETURN: {Int}
fun integer/rem, Param n1: {Int}
fun integer/rem, Param n2: {Int}
fun integer/rem, RETURN: {Int}
fun integer/negate, Param n: {Int}
fun integer/negate, RETURN: {Int}
pred integer/eq, Param n1: {Int}
pred integer/eq, Param n2: {Int}
pred integer/eq, RETURN: {PrimitiveBoolean}
pred integer/gt, Param n1: {Int}
pred integer/gt, Param n2: {Int}
pred integer/gt, RETURN: {PrimitiveBoolean}
pred integer/lt, Param n1: {Int}
pred integer/lt, Param n2: {Int}
pred integer/lt, RETURN: {PrimitiveBoolean}
pred integer/gte, Param n1: {Int}
pred integer/gte, Param n2: {Int}
pred integer/gte, RETURN: {PrimitiveBoolean}
pred integer/lte, Param n1: {Int}
pred integer/lte, Param n2: {Int}
pred integer/lte, RETURN: {PrimitiveBoolean}
pred integer/zero, Param n: {Int}
pred integer/zero, RETURN: {PrimitiveBoolean}
pred integer/pos, Param n: {Int}
pred integer/pos, RETURN: {PrimitiveBoolean}
pred integer/neg, Param n: {Int}
pred integer/neg, RETURN: {PrimitiveBoolean}
pred integer/nonpos, Param n: {Int}
pred integer/nonpos, RETURN: {PrimitiveBoolean}
pred integer/nonneg, Param n: {Int}
pred integer/nonneg, RETURN: {PrimitiveBoolean}
fun integer/signum, Param n: {Int}
fun integer/signum, RETURN: {Int}
fun integer/int2elem, Param i: {Int}
fun integer/int2elem, Param next: {univ->univ}
fun integer/int2elem, Param s: {univ}
fun integer/int2elem, RETURN: {univ}
fun integer/elem2int, Param e: {univ}
fun integer/elem2int, Param next: {univ->univ}
fun integer/elem2int, RETURN: {Int}
fun integer/max, RETURN: {Int}
fun integer/max, Param es: {Int}
fun integer/max, RETURN: {Int}
fun integer/min, RETURN: {Int}
fun integer/min, Param es: {Int}
fun integer/min, RETURN: {Int}
fun integer/next, RETURN: {Int->Int}
fun integer/prev, RETURN: {Int->Int}
fun integer/prevs, Param e: {Int}
fun integer/prevs, RETURN: {Int}
fun integer/nexts, Param e: {Int}
fun integer/nexts, RETURN: {Int}
fun integer/larger, Param e1: {Int}
fun integer/larger, Param e2: {Int}
fun integer/larger, RETURN: {Int}
fun integer/smaller, Param e1: {Int}
fun integer/smaller, Param e2: {Int}
fun integer/smaller, RETURN: {Int}
pred integer/$$Default, RETURN: {PrimitiveBoolean}
pred this/run$1, BODY:{PrimitiveBoolean}
pred this/assumptions, BODY:{PrimitiveBoolean}
pred this/move, BODY:{PrimitiveBoolean}
pred this/stutter, BODY:{PrimitiveBoolean}
pred this/run$2, BODY:{PrimitiveBoolean}
pred this/fairness, BODY:{PrimitiveBoolean}
Assertion safety_visited: {PrimitiveBoolean}
Assertion safety_euler_visited: {PrimitiveBoolean}
Assertion liveness_euler: {PrimitiveBoolean}
Fact eulerian_assumptions: {PrimitiveBoolean}
fun integer/add, BODY:{Int}
fun integer/plus, BODY:{Int}
fun integer/sub, BODY:{Int}
fun integer/minus, BODY:{Int}
fun integer/mul, BODY:{Int}
fun integer/div, BODY:{Int}
fun integer/rem, BODY:{Int}
fun integer/negate, BODY:{Int}
pred integer/eq, BODY:{PrimitiveBoolean}
pred integer/gt, BODY:{PrimitiveBoolean}
pred integer/lt, BODY:{PrimitiveBoolean}
pred integer/gte, BODY:{PrimitiveBoolean}
pred integer/lte, BODY:{PrimitiveBoolean}
pred integer/zero, BODY:{PrimitiveBoolean}
pred integer/pos, BODY:{PrimitiveBoolean}
pred integer/neg, BODY:{PrimitiveBoolean}
pred integer/nonpos, BODY:{PrimitiveBoolean}
pred integer/nonneg, BODY:{PrimitiveBoolean}
fun integer/signum, BODY:{Int}
fun integer/int2elem, BODY:{univ}
fun integer/elem2int, BODY:{Int}
fun integer/max, BODY:{Int}
fun integer/max, BODY:{Int}
fun integer/min, BODY:{Int}
fun integer/min, BODY:{Int}
fun integer/next, BODY:{Int->Int}
fun integer/prev, BODY:{Int->Int}
fun integer/prevs, BODY:{Int}
fun integer/nexts, BODY:{Int}
fun integer/larger, BODY:{Int}
fun integer/smaller, BODY:{Int}
pred integer/$$Default, BODY:{PrimitiveBoolean}
Executing "Run example for exactly 5 Node"
   Sig this/Node scope <= 5
   Sig this/Init scope <= 1
   Sig this/Euler in [[Init$0], [Node$0], [Node$1], [Node$2], [Node$3]]
   Sig this/Node == [[Init$0], [Node$0], [Node$1], [Node$2], [Node$3]]
   Sig this/Init == [[Init$0]]
   Sig this/Euler in [[Init$0], [Node$0], [Node$1], [Node$2], [Node$3]] with size==1
Generating facts...
Simplifying the bounds...
Solver=mem Decomposed=disabled Bitwidth=4 MaxSeq=4 Symmetry=20
Generating the solution...
   1073 vars. 56 primary vars. 1994 clauses. 12345ms.


Exception: Fatal error:
Unknown exception occurred: kodkod.engine.AbortedException: kodkod.engine.satlab.SATAbortedException: java.io.IOException: Cannot run program "/zweb/sat/mem": error=2, Ficheiro ou pasta inexistente